#!/usr/bin/env bash
# 
# mcskindl is a Minecraft: Java Edition player skin downloader in bash(1)
# 
#          NOT AN OFFICIAL MINECRAFT PRODUCT.
# NOT APPROVED BY OR ASSOCIATED WITH MOJANG OR MICROSOFT.
# 
# Requirements:
# - bash (tested with 5.2.x, POSIX shell version might be available later)
# - curl for fetching (if HTTPS works then it should work)
#   Set environment variable "MCSKINDL_USE_WGET" to "yes" if you prefer
#   using wget
# - jq for processing JSON data (important)
# - base64 for decoding Base64 data
#   (should be included with coreutils or busybox any other implementations
#   that supports decoding)
# - sed (for substituting some HTTP URLs to HTTPS, remove any calls of sed
#   if you don't want this behavior.
# 
# WARNING!
# THE CGI Script mode is NOT intended for production use due to performance
# and security issues.
# 
# TODO:
# - Detect if the input is a valid UUID otherwise it is a Username.
# 
# Thanks to https://github.com/koalaman/shellcheck for helping me to
# catch potential bugs and also https://github.com/matejak/argbash/ for
# generating the code to handle command line arguments!

# This is a bash script.
# This should not be executed with other shell interpreter.
if [ -z "$BASH_VERSION" ]
then
	echo "Sorry, this is a Bash script. This script could only be run with Bash. Exitting." >&2
	exit 1
fi

# Prevent running as sourced script
(return 0 2>/dev/null) && echo "This script is not intended to be sourced. Exitting." >&2 && return 1;

# Argbash stuff that I did not write manually:

# version="0.1"
#
# ARG_POSITIONAL_SINGLE([username],[Any valid Minecraft: Java Edition username.])
# ARG_OPTIONAL_BOOLEAN([cgi],[c],[Run in CGI script mode if detected (enabled by default, use --no-cgi to disable). Queries will be read from the QUERY_STRING environment variable.], [on])
# ARG_OPTIONAL_BOOLEAN([silent],[s],[Suppress all verbose messages.])
# ARG_HELP([A Minecraft: Java Edition player skin downloader in bash(1)],[NOT AN OFFICIAL MINECRAFT PRODUCT. NOT APPROVED BY OR ASSOCIATED WITH MOJANG OR MICROSOFT.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://github.com/matejak/argbash for more info
# Generated online by https://argbash.dev/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='csh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_cgi="on"
_arg_silent="off"


print_help()
{
	printf '%s\n' "A Minecraft: Java Edition player skin downloader in bash(1)"
	printf 'Usage: %s [-c|--(no-)cgi] [-s|--(no-)silent] [-h|--help] <username>\n' "$0"
	printf '\t%s\n' "<username>: Any valid Minecraft: Java Edition username."
	printf '\t%s\n' "-c, --cgi, --no-cgi: Run in CGI script mode if detected (enabled by default, use --no-cgi to disable). Queries will be read from the QUERY_STRING environment variable. (off by default)"
	printf '\t%s\n' "-s, --silent, --no-silent: Suppress all verbose messages. (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\n%s\n' "NOT AN OFFICIAL MINECRAFT PRODUCT. NOT APPROVED BY OR ASSOCIATED WITH MOJANG OR MICROSOFT."
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--no-cgi|--cgi)
				_arg_cgi="on"
				test "${1:0:5}" = "--no-" && _arg_cgi="off"
				;;
			-c*)
				_arg_cgi="on"
				_next="${_key##-c}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-c" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-s|--no-silent|--silent)
				_arg_silent="on"
				test "${1:0:5}" = "--no-" && _arg_silent="off"
				;;
			-s*)
				_arg_silent="on"
				_next="${_key##-s}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'username'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_username "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"

### STOP Argbash-generated code ###
# Detect CGI Scripts and set the username to the QUERY_STRING environment variable.
is_cgi="no"
test $_arg_cgi = "on" && if [[ -n "$QUERY_STRING" ]]
then
	is_cgi="yes"
	_arg_username="$QUERY_STRING"
fi
if [[ "$is_cgi" = "no" ]]; then
### CONTINUE Argbash-generated code ###

handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

### END OF CODE GENERATED BY Argbash ###
fi

# Uncomment the line below to debug this script by tracing the commands
# that will be run.
# set -x

# Verbose echo (print verbose messages to the stderr)
vecho () {
	# Respect the --silent option
	if [[ "$_arg_silent" = "on" ]]; then
		return 0
	fi
	echo "$@" >&2
}

# Detect if cURL is installed, if not use wget
# Set MCSKINDL_USE_WGET environment variable to "yes" to force using "wget"

if ! command -v curl &> /dev/null; then
	if ! command -v wget &> /dev/null; then
		vecho "Please install either cURL of Wget to make this script work."
		vecho "Exitting..."
		exit 1
	fi
	vecho "cURL not available, using wget instead."
	MCSKINDL_USE_WGET="yes"
fi

if [[ -z "$MCSKINDL_USE_WGET" ]]; then
	MCSKINDL_USE_WGET="no"
fi

fetch () {
	if [[ "$MCSKINDL_USE_WGET" = "yes" ]]; then
		wget -qO - "$@"
	else
		curl -sL "$@"
	fi
}

# Detect if jq, base64, and sed is installed, otherwise just exit.
if ! command -v jq &> /dev/null; then
	vecho 'Please install "jq" to make this script work.'
	vecho "Exitting..."
	exit 1
fi

unavailable_cmds=""

if ! command -v base64 &> /dev/null; then
	unavailable_cmds+="base64 "
fi

if ! command -v sed &> /dev/null; then
	unavailable_cmds+="sed "
fi

if [[ -n "$unavailable_cmds" ]]; then
	vecho "The following program(s): ${unavailable_cmds}cannot be found in your system."
	vecho 'Usually, it is shipped by default on most Unix-based system.'
	vecho 'If you are using a single binary for several utilities, please symlink it to the appropriate binary in your system (usually the "busybox" or the "coreutils" program).'
	vecho 'If it is not already installed, please install it according on your system.'
	vecho 'If it is already installed, make sure it is installed inside of your $PATH.'
	vecho 'Current value of your $PATH variable is:'
	vecho "$PATH"
	vecho ''
	# Mention the error again just in case the $PATH is long enough
	# to fill the user's entire terminal window or screen.
	vecho "${unavailable_cmds}not found, Exitting..."
	exit 1
fi

# Failsafe options to avoid empty variable expansions. See:
# https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html
# for reference.
set -e -u

# Detect invalid usernames
if [[ -z "$_arg_username" ]]; then
	vecho "Username cannot be empty! Exitting..."
	exit 1
fi

vecho "Fetching $_arg_username's UUID ..."
# Get the UUID from Username (first argument)
uuid="$(fetch "https://api.mojang.com/users/profiles/minecraft/$_arg_username" | jq -r .id)"
vecho -n "UUID of $_arg_username is $uuid.
Fetching $_arg_username's profile properties ... "
# Get the player's profile properties
profile_prop="$(fetch "https://sessionserver.mojang.com/session/minecraft/profile/$uuid" | jq '.properties')"
vecho "Done
Getting $_arg_username's skin ...
Step 1: Finding the texture property"
# Loop over the properties until we find "textures"
echo "$profile_prop" | jq -c '.[]' | while read -r prop
do
	if [[ "$(echo "$prop" | jq -r '.name')" = "textures" ]]
	then
		vecho "Step 2: Getting the skin URL"
		# Convert the texture properties from base64 to JSON,
		# then get the textures.SKIN.url
		# (and preferably convert it into HTTPS)
		textureurl="$(echo "$prop" | jq -r '.value' | base64 -d | jq -r '.textures.SKIN.url' | sed 's/http:\/\//https:\/\//g')"
		# If not running in CGI mode
		if [[ "$is_cgi" = "no" ]]; then
			# Generate the filename to save the file
			outfile="$_arg_username.$(date '+%F_%H_%M_%S').png"
			vecho "Saving $textureurl as $outfile ..."
			# Download the skin and save it to disk
			fetch "$textureurl" > "$outfile"
		else
			# Or dump it into stdout
			vecho "Dumping to stdout..."
			echo "Content-Type: image/png
Content-Disposition: inline
Cache-Control: no-store
"
			fetch "$textureurl"
		fi
		vecho "Done!"
		exit
	fi
done

# MIT License
# 
# Copyright (c) 2024 explor4268
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

